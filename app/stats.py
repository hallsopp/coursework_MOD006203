import streamlit as st
import numpy as np
import plotly.express as px

def stats_page():
    st.title("Statistical modelling of TUNA knockdown dynamics")

    if not 'deg' in st.session_state:
        st.error("Please load the data first. Head to the home page, then come back here.")

    deg = st.session_state.deg
    deg = deg.dropna(subset=["log2FoldChange", "pvalue"])
    deg["-log10(pvalue)"] = -deg["pvalue"].apply(lambda p: np.log10(p))

    st.write(
        """
        ***
        In order to asses the effect of TUNA knockdown on the MESCs, the dynamics can be modelled using non-linear regressions. \
        The software package `DESeq2` provides normalization and generalised linear models (of the negative binomial family) \
        for RNA-seq data.

        The input for building the model is the raw count data, which was generated by mapping the FASTQ reads against the \
        GRCh39 reference genome using the `nf-core` RNA-seq pipeline in the `Nextflow` workflow manager.

        Contrasts were defined to compare the predictor variable (TUNA knockdown) against the control group for each of the \
        time points (days 2, 4 and 6). This generated a set of differentially expressed genes (DEGs) for each. Every gene, in \
        each contrast, is assigned a log2 fold change (log2FC), a p-value (based on the H0 that there is no difference between \
        treatment and control) and a false discovery rate (FDR) adjusted p-value, to correct for multiple-testing.

        ***
        """
    )

    st.subheader("Differentially Expressed Genes (DEGs)")
    st.data_editor(deg, use_container_width=True)

    contrasts = deg["contrast"].unique()

    # Selector for contrast
    selected_contrast = st.selectbox("Select Contrast", contrasts)

    # Filter data based on selected contrast
    filtered_df = deg[deg["contrast"] == selected_contrast]
    filtered_df["Significant"] = (filtered_df["padj"] < 0.05) & (abs(filtered_df["log2FoldChange"]) > 0)

    # Create volcano plot using Plotly
    fig = px.scatter(
        filtered_df,
        x="log2FoldChange",
        y="-log10(pvalue)",
        # text="Gene_ID",
        color="Significant",
        color_discrete_map={True: "red", False: "blue"},
        title=f"Volcano Plot for {selected_contrast}",
        labels={"log2FoldChange": "log2(Fold Change)", "-log10(pvalue)": "-log10(p-value)"},
        hover_data=["Gene_ID", "baseMean", "lfcSE", "stat", "padj"]
    )

    # Highlight genes with significant fold change and p-value
    fig.update_traces(
        marker=dict(size=12, color="red"),
        selector=dict(mode="markers+text")
    )
    fig.add_shape(
        type="line", line=dict(dash="dash"),
        x0=-1, x1=1, y0=2, y1=2
    )

    # Display the plot using Streamlit
    st.plotly_chart(fig)
